import pygame, sys, random

def draw_floor():
    screen.blit(floor, (floor_x_pos, 700))
    screen.blit(floor, (floor_x_pos + 675, 700))

def create_pipe():
    random_pipe_pos = random.choice(pipe_height)
    bottom_pipe = pipe_surface.get_rect(midtop=(750, random_pipe_pos))
    top_pipe = pipe_surface.get_rect(midbottom=(750, random_pipe_pos - 250))
    return bottom_pipe, top_pipe

def move_pipes(pipes):
    for pipe in pipes:
        pipe.centerx -= pipe_speed
    return pipes

def draw_pipes(pipes):
    for pipe in pipes:
        if pipe.bottom >= 900:
            screen.blit(pipe_surface, pipe)
        else:
            flip_pipe = pygame.transform.flip(pipe_surface, False, True)
            screen.blit(flip_pipe, pipe)

def check_collision(pipes):
    for pipe in pipes:
        if bird_rect.colliderect(pipe):
            return False
    if bird_rect.top <= -100 or bird_rect.bottom >= 800:
        return False
    return True

def rotate_bird(bird):
    new_bird = pygame.transform.rotozoom(bird, -bird_movement * 3, 1)
    return new_bird

def bird_animation():
    new_bird = bird_frames[bird_index]
    new_bird_rect = new_bird.get_rect(center=(100, bird_rect.centery))
    return new_bird, new_bird_rect

pygame.init()

screen = pygame.display.set_mode((600, 900))
clock = pygame.time.Clock()

gravity = 0.25
bird_movement = 0
game_active = True
score = 0

bg_surface = pygame.image.load('bg.png')

floor = pygame.image.load('ground.png').convert()
floor = pygame.transform.scale2x(floor)
floor_x_pos = 0

bird_downflap = pygame.transform.scale2x(pygame.image.load('bluebird-downflap.png')).convert_alpha()
bird_midflap = pygame.transform.scale2x(pygame.image.load('bluebird-midflap.png')).convert_alpha()
bird_upflap = pygame.image.load('bluebird-upflap.png').convert_alpha()
bird_frames = [bird_downflap, bird_midflap, bird_upflap]
bird_index = 0
bird = bird_frames[bird_index]
bird_rect = bird.get_rect(center=(100, 450))

BIRDFLAP = pygame.USEREVENT + 1
pygame.time.set_timer(BIRDFLAP, 200)

SPAWNPIPE = pygame.USEREVENT
pygame.time.set_timer(SPAWNPIPE, 1200)
pipe_height = [400, 600, 500]
pipe_surface = pygame.image.load('pipe-green.png')
pipe_surface = pygame.transform.scale2x(pipe_surface)
pipe_list = []

font = pygame.font.Font(None, 36)

def update_score(score):
    score_text = font.render("Score: " + str(score), True, (255, 255, 255))
    screen.blit(score_text, (10, 10))

pipe_speed = 5 # Increased speed
pipe_direction = 0
pipe_change = 0
pipe_max_change = 100

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
            
        if event.type == pygame.KEYDOWN:     
            if event.key == pygame.K_SPACE:
                if game_active:
                    bird_movement = 0
                    bird_movement -= 10
                else:
                    # Restart the game
                    game_active = True
                    pipe_list.clear()
                    bird_rect.center = (100, 450)
                    bird_movement = 0
                    score = 0

        if event.type == BIRDFLAP:
            if bird_index < 2:
                bird_index += 1
            else:
                bird_index = 0
                
        if event.type == SPAWNPIPE:
            pipe_list.extend(create_pipe())

    screen.blit(bg_surface, (0, 0))
    if game_active:
        bird_movement += gravity
        rotated_bird = rotate_bird(bird)
        bird_rect.centery += bird_movement
        screen.blit(rotated_bird, bird_rect)
        game_active = check_collision(pipe_list)
        pipe_list = move_pipes(pipe_list)
        draw_pipes(pipe_list)

        # Move pipes up and down
        for pipe in pipe_list:
            if pipe.centery <= 0:
                pipe_direction = 1
            elif pipe.centery >= 800:
                pipe_direction = -1
            pipe.centery += pipe_direction

        # Check if bird has passed a pipe
        for pipe in pipe_list:
            if pipe.centerx == 100:
                score += 1

        update_score(score)

    floor_x_pos -= 1
    draw_floor()
    if floor_x_pos <= -675:
        floor_x_pos = 0

    pygame.display.update()
    clock.tick(120)
